/*******************************************************************************
 * Copyright (c) 2012, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * @file            Lock.cpp
 * @author          Jean-David Gadina <macmade@eosgarden.com>
 * @copyright       (c) 2012, eosgarden
 */

#ifdef _WIN32
    
    #include <windows.h>
    
#else
    
    #include <pthread.h>
    
#endif

#include "Lock.h"
#include "Exception.h"

namespace EOS
{
    Lock::Lock()
    {
        Exception e;
        bool      error;
        
        error         = false;
        this->_locked = false;
        
        #ifdef _WIN32
            
            this->_mutex = CreateMutex( NULL, FALSE, NULL );
            
            if( this->_mutex == NULL )
            {
                error = true;
            }
            
        #else
            
            if( pthread_mutex_init( &( this->_mutex ), NULL ) != 0 )
            {
                error = true;
            }
            
        #endif
        
        if( error == true )
        {
            e.reason( "Cannot initialize mutex" );
            
            throw e;
        }
    }
    
    Lock::~Lock()
    {
        #ifdef _WIN32
            
            CloseHandle( this->_mutex );
            
        #else
            
            pthread_mutex_destroy( &( this->_mutex ) );
            
        #endif
    }
    
    bool Lock::lock()
    {
        #ifdef _WIN32
            
            if( WaitForSingleObject( this->_mutex, INFINITE ) == WAIT_OBJECT_0 )
            {
                this->_locked = true;
            }
            
        #else
            
            if( pthread_mutex_lock( &( this->_mutex ) ) == 0 )
            {
                this->_locked = true;
            }
            
        #endif
        
        return this->_locked;
    }
    
    bool Lock::unlock()
    {
        #ifdef _WIN32
            
            if( this->_locked == true && ReleaseMutex( this->_mutex ) )
            {
                this->_locked = false;
            }
            
        #else
            
            if( this->_locked == true && pthread_mutex_unlock( &( this->_mutex ) ) == 0 )
            {
                this->_locked = false;
            }
            
        #endif
        
        return this->_locked;
    }
    
    bool Lock::tryLock()
    {
        #ifdef _WIN32
            
            if( WaitForSingleObject( this->_mutex, 10 ) == WAIT_OBJECT_0 )
            {
                this->_locked = true;
            }
            else
            {
                this->_locked = false;
            }
            
        #else
            
            if( pthread_mutex_trylock( &( this->_mutex ) ) == 0 )
            {
                this->_locked = true;
            }
            else
            {
                this->_locked = false;
            }
            
        #endif
        
        return this->_locked;
    }
    
    bool Lock::isLocked()
    {
        return this->_locked;
    }
}
