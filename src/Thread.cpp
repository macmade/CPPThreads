/*******************************************************************************
 * Copyright (c) 2012, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * @file            Thread.cpp
 * @author          Jean-David Gadina <macmade@eosgarden.com>
 * @copyright       (c) 2012, eosgarden
 */

#include <stdlib.h>
#include <pthread.h>
#include "Thread.h"
#include "Object.h"

namespace EOS
{
    Thread::Thread( void )
    {
        this->_id   = 0;
        this->_name = "Unnamed thread";
    }
    
    Thread::~Thread( void )
    {}
    
    unsigned int Thread::threadID( void ) const
    {
        return this->_id;
    }
    
    void Thread::_threadID( unsigned int threadID )
    {
        this->_id = threadID;
    }
    
    const std::string & Thread::name( void ) const
    {
        return this->_name;
    }
    
    void Thread::name( const std::string & name )
    {
        this->_name = name;
    }
    
    const std::vector< void * > & Thread::arguments( void ) const
    {
        return this->_args;
    }
    
    void Thread::_arguments( const std::vector< void * > & arguments )
    {
        this->_args = arguments;
    }
    
    bool Thread::_detach( EntryPoint func, void * target, Thread * thread )
    {
        pthread_attr_t ta;
        pthread_t      t;
        void        ** ap;
        EntryPoint   * ep;
        void        ** vp;
        
        if( NULL == ( ap = ( void ** )malloc( sizeof( EntryPoint ) + ( 2 * sizeof( void * ) ) ) ) )
        {
            return false;
        }
        
        ep      = ( EntryPoint * )ap;
        ep[ 0 ] = func;
        vp      = ( void ** )( &ep[ 1 ] );
        vp[ 0 ] = target;
        vp[ 1 ] = thread;
        
        pthread_attr_init( &ta );
        pthread_attr_setdetachstate( &ta, PTHREAD_CREATE_DETACHED );
        pthread_create( &t, &ta, &Object::_startThread, ap );
        pthread_attr_destroy( &ta );
        
        return true;
    }
    
    bool Thread::detach( EntryPoint func, void * target )
    {
        Thread * t;
        
        t = new Thread();
        
        return Thread::_detach( func, target, t );
    }
    
    bool Thread::detach( EntryPoint func, void * target, std::vector< void * > & arguments )
    {
        Thread * t;
        
        t = new Thread();
        
        t->_arguments( arguments );
        
        return Thread::_detach( func, target, t );
    }
}